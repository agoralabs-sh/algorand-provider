"use strict";(self.webpackChunk_agoralabs_sh_algorand_provider=self.webpackChunk_agoralabs_sh_algorand_provider||[]).push([[898],{5341:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>g,default:()=>m,frontMatter:()=>d,metadata:()=>u,toc:()=>h});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=a(4866),l=a(5162),o=a(3901),p=["components"],d={},g="Signing Data",u={unversionedId:"getting-started/dapps/signing-data",id:"getting-started/dapps/signing-data",title:"Signing Data",description:"<TOCInline",source:"@site/docs/getting-started/dapps/signing-data.mdx",sourceDirName:"getting-started/dapps",slug:"/getting-started/dapps/signing-data",permalink:"/getting-started/dapps/signing-data",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Sending Transactions",permalink:"/getting-started/dapps/sending-transactions"},next:{title:"Installation",permalink:"/getting-started/wallets/installation"}},c={},h=[{value:"Overview",id:"overview",level:2},{value:"Signing with the default wallet",id:"signing-with-the-default-wallet",level:2},{value:"Signing with a specific wallet",id:"signing-with-a-specific-wallet",level:2},{value:"Signing with a specific account",id:"signing-with-a-specific-account",level:2},{value:"Verifying the signature",id:"verifying-the-signature",level:2}],y={toc:h},w="wrapper";function m(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)(w,(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"signing-data"},"Signing Data"),(0,i.kt)(o.Z,{maxHeadingLevel:4,toc:h,mdxType:"TOCInline"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Wallets, if supported, can sign some arbitrary data that can be verified via the ",(0,i.kt)("a",{parentName:"p",href:"https://algorand.github.io/js-algorand-sdk/functions/verifyBytes.html"},"algosdk.verifyBytes")," method."),(0,i.kt)("h2",{id:"signing-with-the-default-wallet"},"Signing with the default wallet"),(0,i.kt)("p",null,"If you only want to sign data with the default wallet, you can simply call:"),(0,i.kt)(s.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,i.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, ISignBytesResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & ISignBytesResult = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If this operation is not supported, then a ",(0,i.kt)("a",{parentName:"p",href:"../../api-reference/errors#walletoperationnotsupportederror"},(0,i.kt)("inlineCode",{parentName:"a"},"WalletOperationNotSupportedError"))," will be thrown.")),(0,i.kt)("h2",{id:"signing-with-a-specific-wallet"},"Signing with a specific wallet"),(0,i.kt)("p",null,"If you want to target a specific wallet to sign data, you can simply pass the ID of the wallet to the options object:"),(0,i.kt)(s.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n    id: 'another-awesome-wallet',\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'another-awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,i.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, ISignBytesResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & ISignBytesResult = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n    id: 'another-awesome-wallet',\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'another-awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the specified wallet does not exist, then a ",(0,i.kt)("a",{parentName:"p",href:"../../api-reference/errors#walletdoesnotexisterror"},(0,i.kt)("inlineCode",{parentName:"a"},"WalletDoesNotExistError"))," will be thrown.")),(0,i.kt)("h2",{id:"signing-with-a-specific-account"},"Signing with a specific account"),(0,i.kt)("p",null,"If you want to specify which account to use, you can pass the signer in the options object:"),(0,i.kt)(s.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n    signer: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,i.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, ISignBytesResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & ISignBytesResult = await window.algorand.signBytes({\n    data: new Uint8Array([...]),\n    signer: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n  });\n\n  console.log(result);\n  /*\n  {\n    id: 'awesome-wallet',\n    signature: [23, 54, 65 ...],\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the user has not authorized the specified signer or the signer does not exist in the wallet, then a ",(0,i.kt)("a",{parentName:"p",href:"../../api-reference/errors#unauthorizedsignererror"},(0,i.kt)("inlineCode",{parentName:"a"},"UnauthorizedSignerError"))," will be thrown.")),(0,i.kt)("h2",{id:"verifying-the-signature"},"Verifying the signature"),(0,i.kt)("p",null,"Once the data has been signed, you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://algorand.github.io/js-algorand-sdk/functions/verifyBytes.html"},"algosdk.verifyBytes")," function to verify that the data has been signed using the private key."),(0,i.kt)(s.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const algosdk = require('algosdk);\n\nconst data = new Uint8Array([...]);\nconst signer = 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U';\nconst result = await window.algorand.signBytes({\n  data,\n  signer,\n});\n\nif (!algosdk.verifyBytes(data, result.signature, signer)) {\n  throw new Error('invalid signature!!');\n}\n\nconsole.log('data has been verified!');\n"))),(0,i.kt)(l.Z,{value:"typescript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, ISignBytesResult } from '@agoralabs-sh/algorand-provider';\nimport { verifyBytes } from 'algosdk';\n\nconst data: Uint8Array = new Uint8Array([...]);\nconst signer: string = 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U';\nconst result: IBaseResult & ISignBytesResult = await window.algorand.signBytes({\n  data,\n  signer,\n});\n\nif (!verifyBytes(data, result.signature, signer)) {\n  throw new Error('invalid signature!!');\n}\n\nconsole.log('data has been verified!');\n")))))}m.isMDXComponent=!0}}]);