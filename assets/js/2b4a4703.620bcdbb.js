"use strict";(self.webpackChunk_agoralabs_sh_algorand_provider=self.webpackChunk_agoralabs_sh_algorand_provider||[]).push([[676],{3:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>k,frontMatter:()=>p,metadata:()=>u,toc:()=>w});var t=a(7462),l=a(3366),s=(a(7294),a(3905)),r=a(4866),i=a(5162),o=a(3901),d=["components"],p={},c="Enabling A Wallet",u={unversionedId:"getting-started/dapps/enabling-a-wallet",id:"getting-started/dapps/enabling-a-wallet",title:"Enabling A Wallet",description:"<TOCInline",source:"@site/docs/getting-started/dapps/enabling-a-wallet.mdx",sourceDirName:"getting-started/dapps",slug:"/getting-started/dapps/enabling-a-wallet",permalink:"/getting-started/dapps/enabling-a-wallet",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Initialization",permalink:"/getting-started/dapps/initialization"},next:{title:"Signing Transactions",permalink:"/getting-started/dapps/signing-transactions"}},m={},w=[{value:"Overview",id:"overview",level:2},{value:"Enabling the default wallet",id:"enabling-the-default-wallet",level:2},{value:"Enabling a specific wallet",id:"enabling-a-specific-wallet",level:2},{value:"Enabling a specific network",id:"enabling-a-specific-network",level:2}],g={toc:w},h="wrapper";function k(e){var n=e.components,a=(0,l.Z)(e,d);return(0,s.kt)(h,(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"enabling-a-wallet"},"Enabling A Wallet"),(0,s.kt)(o.Z,{maxHeadingLevel:4,toc:w,mdxType:"TOCInline"}),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"Before we can start interacting with a wallet, we will need to enable the dApp on a wallet. This will achieve two things:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"it will authorize your dApp with the wallet; and"),(0,s.kt)("li",{parentName:"ul"},"it will get a list of the accounts available for your dApp to use.")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"It should be safe to call ",(0,s.kt)("a",{parentName:"p",href:"../../api-reference/algorand-provider#enableoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"enable()"))," as many times as your dApp wants, the wallet should assume this.")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},'The definition of "enabling" a wallet can mean different things to different wallets, but it is highly recommended that you first run ',(0,s.kt)("a",{parentName:"p",href:"../../api-reference/algorand-provider#enableoptions"},(0,s.kt)("inlineCode",{parentName:"a"},"enable()"))," before attempting any other operations.")),(0,s.kt)("h2",{id:"enabling-the-default-wallet"},"Enabling the default wallet"),(0,s.kt)("p",null,"If you only want the default wallet, you can simply call:"),(0,s.kt)(r.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.enable();\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=',\n    genesisId: 'mainnet-v1.0',\n    id: 'awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,s.kt)(i.Z,{value:"typescript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, IEnableResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & IEnableResult = await window.algorand.enable();\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=',\n    genesisId: 'mainnet-v1.0',\n    id: 'awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If no wallets does exist, then a ",(0,s.kt)("a",{parentName:"p",href:"../../api-reference/errors#nowalletsdetectederror"},(0,s.kt)("inlineCode",{parentName:"a"},"NoWalletsDetectedError"))," will be thrown.")),(0,s.kt)("h2",{id:"enabling-a-specific-wallet"},"Enabling a specific wallet"),(0,s.kt)("p",null,"If you want to target a specific wallet, you can simply pass the ID of the wallet to the options object:"),(0,s.kt)(r.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.enable({\n    id: 'another-awesome-wallet',\n  });\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=',\n    genesisId: 'mainnet-v1.0',\n    id: 'another-awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,s.kt)(i.Z,{value:"typescript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, IEnableResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & IEnableResult = await window.algorand.enable({\n    id: 'another-awesome-wallet',\n  });\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=',\n    genesisId: 'mainnet-v1.0',\n    id: 'another-awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If the specified wallet does not exist, then a ",(0,s.kt)("a",{parentName:"p",href:"../../api-reference/errors#walletdoesnotexisterror"},(0,s.kt)("inlineCode",{parentName:"a"},"WalletDoesNotExistError"))," will be thrown.")),(0,s.kt)("h2",{id:"enabling-a-specific-network"},"Enabling a specific network"),(0,s.kt)("p",null,"If you want to target a specific network, and the wallet supports it, you can simply pass the genesis hash of the network to the options object:"),(0,s.kt)(r.Z,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"try {\n  const result = await window.algorand.enable({\n    genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n  });\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n    genesisId: 'testnet-v1.0',\n    id: 'awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n"))),(0,s.kt)(i.Z,{value:"typescript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { IBaseResult, IEnableResult } from '@agoralabs-sh/algorand-provider';\n\ntry {\n  const result: IBaseResult & IEnableResult = await window.algorand.enable({\n    genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n  });\n\n  console.log(result);\n  /*\n  {\n    accounts: [\n      {\n        address: 'P3AIQVDJ2CTH54KSJE63YWB7IZGS4W4JGC53I6GK72BGZ5BXO2B2PS4M4U',\n        name: 'Wallet-1',\n      },\n      {\n        address: '6GT6EXFDAHZDZYUOPT725ZRWYBZDCEGYT7SYYXGJKRFUAG5B7JMI7DQRNQ',\n        name: 'Wallet-2',\n      },\n    ],\n    genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n    genesisId: 'testnet-v1.0',\n    id: 'awesome-wallet',\n    sessionId: 'ab192498-0c63-4028-80fd-f148710611d8',\n  }\n  */\n} catch (error) {\n  // handle error\n}\n")))),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If the specified network is not supported, then a ",(0,s.kt)("a",{parentName:"p",href:"../../api-reference/errors#networknotsupportederror"},(0,s.kt)("inlineCode",{parentName:"a"},"NetworkNotSupportedError"))," will be thrown.")))}k.isMDXComponent=!0}}]);